{"version":3,"sources":["components/input.jsx","components/output.jsx","components/navbar.jsx","components/button.jsx","tokenTypes.js","tokenizer.js","Params.js","formatter.js","App.js","index.js"],"names":["Input","state","className","id","onChange","this","props","placeholder","Component","Output","Navbar","Button","onClick","Tokenizer","cfg","WHITESPACE_REGEX","NUMBER_REGEX","OPERATOR_REGEX","BLOCK_COMMENT_REGEX","LINE_COMMENT_REGEX","createLineCommentRegex","lineCommentTypes","RESERVED_TOPLEVEL_REGEX","createReservedWordRegex","reservedToplevelWords","RESERVED_NEWLINE_REGEX","reservedNewlineWords","RESERVED_PLAIN_REGEX","reservedWords","WORD_REGEX","createWordRegex","specialWordChars","STRING_REGEX","createStringRegex","stringTypes","OPEN_PAREN_REGEX","createParenRegex","openParens","CLOSE_PAREN_REGEX","closeParens","INDEXED_PLACEHOLDER_REGEX","createPlaceholderRegex","indexedPlaceholderTypes","IDENT_NAMED_PLACEHOLDER_REGEX","namedPlaceholderTypes","STRING_NAMED_PLACEHOLDER_REGEX","createStringPattern","RegExp","map","c","escapeRegExp","join","reservedWordsPattern","replace","specialChars","patterns","t","parens","p","escapeParen","paren","length","types","pattern","isEmpty","typesRegex","input","token","tokens","getNextToken","substring","value","push","previousToken","getWhitespaceToken","getCommentToken","getStringToken","getOpenParenToken","getCloseParenToken","getPlaceholderToken","getNumberToken","getReservedWordToken","getWordToken","getOperatorToken","getTokenOnFirstMatch","type","tokenTypes","regex","getLineCommentToken","getBlockCommentToken","getIdentNamedPlaceholderToken","getStringNamedPlaceholderToken","getIndexedPlaceholderToken","getPlaceholderTokenWithKey","parseKey","v","slice","getEscapedPlaceholderKey","key","quoteChar","getToplevelReservedToken","getNewlineReservedToken","getPlainReservedToken","matches","match","Params","params","index","Formatter","tokenizer","format","console","log","getFormattedSQL","forEach","indentation","Indentation","inlineBlock","InlineBlock","previousReservedWord","App","inpValue","handleChange","inp","document","getElementById","setState","handleSubmit","query","tokenize","finalSQL","ReactDOM","render","StrictMode"],"mappings":"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AAK8G,YAAc,IAAIC,IAAY,SACnC/G,KAAKgH,YAAc,IAAIC,IACvBjH,KAAKqG,OAAS,IAAID,EAAO,KAEzBpG,KAAKkH,qBAAuB,GAC5BlH,KAAK+D,OAAS,GACd/D,KAAKsG,MAAQ,ICgXFa,E,4MApXbvH,MAAQ,CACNwH,SAAU,I,EAeZC,aAAe,WACb,IAAMC,EAAMC,SAASC,eAAe,YAAYtD,MAChDwC,QAAQC,IAAIW,GACZ,EAAKG,SAAS,CAAEL,SAAUE,K,EAG5BI,aAAe,WACb,IAAMC,EAAQ,EAAK/H,MAAMwH,SACzBV,QAAQC,IAAIgB,EAAMnE,QAMlB,IA8UMO,EAZU,IAAIvD,EAAU,CAC5Be,cAnUoB,CACpB,aACA,SACA,UACA,YACA,YACA,MACA,QACA,UACA,UACA,KACA,MACA,aACA,iBACA,SACA,QACA,UACA,SACA,OACA,UACA,OACA,SACA,UACA,gBACA,UACA,QACA,WACA,UACA,YACA,SACA,UACA,UACA,SACA,YACA,aACA,aACA,aACA,WACA,UACA,SACA,QACA,oBACA,WACA,YACA,MACA,WACA,aACA,aACA,UACA,UACA,UACA,SACA,OACA,WACA,gBACA,WACA,cACA,MACA,KACA,OACA,WACA,YACA,UACA,OACA,WACA,MACA,SACA,UACA,cACA,SACA,UACA,SACA,OACA,UACA,SACA,UACA,WACA,OACA,QACA,SACA,OACA,QACA,QACA,QACA,MACA,QACA,UACA,OACA,WACA,WACA,SACA,QACA,SACA,eACA,OACA,gBACA,QACA,OACA,cACA,cACA,aACA,KACA,SACA,SACA,KACA,QACA,UACA,SACA,SACA,YACA,gBACA,WACA,OACA,UACA,KACA,YACA,MACA,OACA,OACA,iBACA,UACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,QACA,OACA,eACA,QACA,SACA,uBACA,cACA,kBACA,QACA,2BACA,uBACA,WACA,uBACA,uBACA,SACA,QACA,SACA,gBACA,WACA,OACA,SACA,QACA,aACA,SACA,QACA,UACA,MACA,QACA,OACA,SACA,YACA,YACA,KACA,OACA,OACA,WACA,SACA,aACA,UACA,YACA,OACA,UACA,YACA,aACA,WACA,UACA,aACA,YACA,UACA,cACA,QACA,QACA,QACA,cACA,iBACA,YACA,QACA,OACA,YACA,aACA,aACA,SACA,SACA,SACA,SACA,aACA,UACA,cACA,QACA,UACA,WACA,SACA,UACA,SACA,QACA,WACA,MACA,OACA,aACA,SACA,WACA,YACA,eACA,UACA,QACA,OACA,WACA,QACA,SACA,SACA,MACA,mBACA,iBACA,kBACA,iBACA,oBACA,YACA,sBACA,cACA,cACA,iBACA,2BACA,oBACA,eACA,wBACA,mBACA,mBACA,yBACA,mBACA,eACA,QACA,WACA,SACA,OACA,UACA,gBACA,SACA,UACA,QACA,QACA,SACA,YACA,aACA,OACA,KACA,WACA,gBACA,OACA,WACA,OACA,QACA,cACA,SACA,SACA,WACA,QACA,MACA,QACA,YACA,OACA,OACA,OACA,OACA,QACA,cAoDAJ,sBAjD4B,CAC5B,MACA,QACA,eACA,cACA,cACA,SACA,cACA,OACA,WACA,KACA,SACA,cACA,SACA,YACA,QACA,SACA,WACA,SACA,qBACA,aACA,MACA,YACA,QACA,SACA,SACA,SAwBAE,qBArB2B,CAC3B,MACA,cACA,aACA,OACA,aACA,OACA,YACA,kBACA,KACA,cACA,aACA,aACA,mBACA,OACA,OAOAQ,YAAa,CAAC,KAAM,MAAO,KAAM,KAAM,MACvCG,WAAY,CAAC,IAAK,QAClBE,YAAa,CAAC,IAAK,OACnBG,wBAAyB,CAAC,KAC1BE,sBAAuB,CAAC,IAAK,KAC7BvB,iBAAkB,CAAC,IAAK,QAGD4G,SAASD,GAG5BE,GADE,IAAItB,GACOE,OAAO1C,GAC1B2C,QAAQC,IAAI5C,GACZwD,SAASC,eAAe,aAAatD,MAAQ2D,G,uDA7W7C,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKhI,UAAU,kBAAkBC,GAAG,aAClC,kBAAC,EAAD,CAAOC,SAAUC,KAAKqH,eACtB,kBAAC,EAAD,CAAQ9G,QAASP,KAAK0H,eACtB,kBAAC,EAAD,Y,GAXQvH,aCJlB2H,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASC,eAAe,W","file":"static/js/main.3389ef83.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Input extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"input-group\" id=\"inputText\">\n        <div className=\"input-group-prepend\"></div>\n        <textarea\n          id=\"inputSQL\"\n          className=\"form-control\"\n          onChange={this.props.onChange}\n          placeholder=\"Input SQL Query here!\"\n        ></textarea>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from \"react\";\n\nclass Output extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"input-group\" id=\"outputText\">\n        <div className=\"input-group-prepend\"></div>\n        <textarea\n          className=\"form-control\"\n          id=\"outputSQL\"\n          placeholder=\"Formatted SQL will appear here!\"\n        ></textarea>\n      </div>\n    );\n  }\n}\n\nexport default Output;\n","import React, { Component } from \"react\";\n\nclass Navbar extends Component {\n  state = {};\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <span className=\"navbar-brand mb-0 h1\">SQLFormatter</span>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass Button extends Component {\n  state = {};\n  render() {\n    return (\n      <button\n        className=\"btn btn-warning btn-lg \"\n        id=\"formatBtn\"\n        onClick={this.props.onClick}\n      >\n        Format!\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","//conatins list of different types of tokens\n\nexport default {\n  WHITESPACE: \"whitespace\",\n  WORD: \"word\",\n  STRING: \"string\",\n  RESERVED: \"reserved\",\n  RESERVED_TOPLEVEL: \"reserved-toplevel\",\n  RESERVED_NEWLINE: \"reserved-newline\",\n  OPERATOR: \"operator\",\n  OPEN_PAREN: \"open-paren\",\n  CLOSE_PAREN: \"close-paren\",\n  LINE_COMMENT: \"line-comment\",\n  BLOCK_COMMENT: \"block-comment\",\n  NUMBER: \"number\",\n  PLACEHOLDER: \"placeholder\",\n};\n","import isEmpty from \"lodash/isEmpty\";\nimport escapeRegExp from \"lodash/escapeRegExp\";\nimport tokenTypes from \"./tokenTypes\";\n\nexport default class Tokenizer {\n  constructor(cfg) {\n    this.WHITESPACE_REGEX = /^(\\s+)/;\n    this.NUMBER_REGEX = /^((-\\s*)?[0-9]+(\\.[0-9]+)?|0x[0-9a-fA-F]+|0b[01]+)\\b/;\n    this.OPERATOR_REGEX = /^(!=|<>|==|<=|>=|!<|!>|\\|\\||::|->>|->|~~\\*|~~|!~~\\*|!~~|~\\*|!~\\*|!~|.)/;\n\n    this.BLOCK_COMMENT_REGEX = /^(\\/\\*[^]*?(?:\\*\\/|$))/;\n    this.LINE_COMMENT_REGEX = this.createLineCommentRegex(cfg.lineCommentTypes);\n\n    this.RESERVED_TOPLEVEL_REGEX = this.createReservedWordRegex(\n      cfg.reservedToplevelWords\n    );\n    this.RESERVED_NEWLINE_REGEX = this.createReservedWordRegex(\n      cfg.reservedNewlineWords\n    );\n    this.RESERVED_PLAIN_REGEX = this.createReservedWordRegex(cfg.reservedWords);\n\n    this.WORD_REGEX = this.createWordRegex(cfg.specialWordChars);\n    this.STRING_REGEX = this.createStringRegex(cfg.stringTypes);\n\n    this.OPEN_PAREN_REGEX = this.createParenRegex(cfg.openParens);\n    this.CLOSE_PAREN_REGEX = this.createParenRegex(cfg.closeParens);\n\n    this.INDEXED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(\n      cfg.indexedPlaceholderTypes,\n      \"[0-9]*\"\n    );\n    this.IDENT_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(\n      cfg.namedPlaceholderTypes,\n      \"[a-zA-Z0-9._$]+\"\n    );\n    this.STRING_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(\n      cfg.namedPlaceholderTypes,\n      this.createStringPattern(cfg.stringTypes)\n    );\n  }\n\n  createLineCommentRegex(lineCommentTypes) {\n    return new RegExp(\n      `^((?:${lineCommentTypes\n        .map((c) => escapeRegExp(c))\n        .join(\"|\")}).*?(?:\\n|$))`\n    );\n  }\n\n  createReservedWordRegex(reservedWords) {\n    const reservedWordsPattern = reservedWords.join(\"|\").replace(/ /g, \"\\\\s+\");\n    return new RegExp(`^(${reservedWordsPattern})\\\\b`, \"i\");\n  }\n\n  createWordRegex(specialChars = []) {\n    return new RegExp(`^([\\\\w${specialChars.join(\"\")}]+)`);\n  }\n\n  createStringRegex(stringTypes) {\n    return new RegExp(\"^(\" + this.createStringPattern(stringTypes) + \")\");\n  }\n\n  // This enables the following string patterns:\n  // 1. backtick quoted string using `` to escape\n  // 2. square bracket quoted string (SQL Server) using ]] to escape\n  // 3. double quoted string using \"\" or \\\" to escape\n  // 4. single quoted string using '' or \\' to escape\n  // 5. national character quoted string using N'' or N\\' to escape\n  createStringPattern(stringTypes) {\n    const patterns = {\n      \"``\": \"((`[^`]*($|`))+)\",\n      \"[]\": \"((\\\\[[^\\\\]]*($|\\\\]))(\\\\][^\\\\]]*($|\\\\]))*)\",\n      '\"\"': '((\"[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*(\"|$))+)',\n      \"''\": \"(('[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n      \"N''\": \"((N'[^N'\\\\\\\\]*(?:\\\\\\\\.[^N'\\\\\\\\]*)*('|$))+)\",\n    };\n\n    return stringTypes.map((t) => patterns[t]).join(\"|\");\n  }\n\n  createParenRegex(parens) {\n    return new RegExp(\n      \"^(\" + parens.map((p) => this.escapeParen(p)).join(\"|\") + \")\",\n      \"i\"\n    );\n  }\n\n  escapeParen(paren) {\n    if (paren.length === 1) {\n      // A single punctuation character\n      return escapeRegExp(paren);\n    } else {\n      // longer word\n      return \"\\\\b\" + paren + \"\\\\b\";\n    }\n  }\n\n  createPlaceholderRegex(types, pattern) {\n    if (isEmpty(types)) {\n      return false;\n    }\n    const typesRegex = types.map(escapeRegExp).join(\"|\");\n\n    return new RegExp(`^((?:${typesRegex})(?:${pattern}))`);\n  }\n\n  tokenize(input) {\n    const tokens = [];\n    let token;\n\n    // Keep processing the string until it is empty\n    while (input.length) {\n      // Get the next token and the token type\n      token = this.getNextToken(input, token);\n      // Advance the string\n      input = input.substring(token.value.length);\n\n      tokens.push(token);\n    }\n    return tokens;\n  }\n\n  getNextToken(input, previousToken) {\n    return (\n      this.getWhitespaceToken(input) ||\n      this.getCommentToken(input) ||\n      this.getStringToken(input) ||\n      this.getOpenParenToken(input) ||\n      this.getCloseParenToken(input) ||\n      this.getPlaceholderToken(input) ||\n      this.getNumberToken(input) ||\n      this.getReservedWordToken(input, previousToken) ||\n      this.getWordToken(input) ||\n      this.getOperatorToken(input)\n    );\n  }\n\n  getWhitespaceToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.WHITESPACE,\n      regex: this.WHITESPACE_REGEX,\n    });\n  }\n\n  getCommentToken(input) {\n    return this.getLineCommentToken(input) || this.getBlockCommentToken(input);\n  }\n\n  getLineCommentToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.LINE_COMMENT,\n      regex: this.LINE_COMMENT_REGEX,\n    });\n  }\n\n  getBlockCommentToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.BLOCK_COMMENT,\n      regex: this.BLOCK_COMMENT_REGEX,\n    });\n  }\n\n  getStringToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.STRING,\n      regex: this.STRING_REGEX,\n    });\n  }\n\n  getOpenParenToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.OPEN_PAREN,\n      regex: this.OPEN_PAREN_REGEX,\n    });\n  }\n\n  getCloseParenToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.CLOSE_PAREN,\n      regex: this.CLOSE_PAREN_REGEX,\n    });\n  }\n\n  getPlaceholderToken(input) {\n    return (\n      this.getIdentNamedPlaceholderToken(input) ||\n      this.getStringNamedPlaceholderToken(input) ||\n      this.getIndexedPlaceholderToken(input)\n    );\n  }\n\n  getIdentNamedPlaceholderToken(input) {\n    return this.getPlaceholderTokenWithKey({\n      input,\n      regex: this.IDENT_NAMED_PLACEHOLDER_REGEX,\n      parseKey: (v) => v.slice(1),\n    });\n  }\n\n  getStringNamedPlaceholderToken(input) {\n    return this.getPlaceholderTokenWithKey({\n      input,\n      regex: this.STRING_NAMED_PLACEHOLDER_REGEX,\n      parseKey: (v) =>\n        this.getEscapedPlaceholderKey({\n          key: v.slice(2, -1),\n          quoteChar: v.slice(-1),\n        }),\n    });\n  }\n\n  getIndexedPlaceholderToken(input) {\n    return this.getPlaceholderTokenWithKey({\n      input,\n      regex: this.INDEXED_PLACEHOLDER_REGEX,\n      parseKey: (v) => v.slice(1),\n    });\n  }\n\n  getPlaceholderTokenWithKey({ input, regex, parseKey }) {\n    const token = this.getTokenOnFirstMatch({\n      input,\n      regex,\n      type: tokenTypes.PLACEHOLDER,\n    });\n    if (token) {\n      token.key = parseKey(token.value);\n    }\n    return token;\n  }\n\n  getEscapedPlaceholderKey({ key, quoteChar }) {\n    return key.replace(\n      new RegExp(escapeRegExp(\"\\\\\") + quoteChar, \"g\"),\n      quoteChar\n    );\n  }\n\n  // Decimal, binary, or hex numbers\n  getNumberToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.NUMBER,\n      regex: this.NUMBER_REGEX,\n    });\n  }\n\n  // Punctuation and symbols\n  getOperatorToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.OPERATOR,\n      regex: this.OPERATOR_REGEX,\n    });\n  }\n\n  getReservedWordToken(input, previousToken) {\n    // A reserved word cannot be preceded by a \".\"\n    // this makes it so in \"mytable.from\", \"from\" is not considered a reserved word\n    if (previousToken && previousToken.value && previousToken.value === \".\") {\n      return;\n    }\n    return (\n      this.getToplevelReservedToken(input) ||\n      this.getNewlineReservedToken(input) ||\n      this.getPlainReservedToken(input)\n    );\n  }\n\n  getToplevelReservedToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED_TOPLEVEL,\n      regex: this.RESERVED_TOPLEVEL_REGEX,\n    });\n  }\n\n  getNewlineReservedToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED_NEWLINE,\n      regex: this.RESERVED_NEWLINE_REGEX,\n    });\n  }\n\n  getPlainReservedToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED,\n      regex: this.RESERVED_PLAIN_REGEX,\n    });\n  }\n\n  getWordToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.WORD,\n      regex: this.WORD_REGEX,\n    });\n  }\n\n  getTokenOnFirstMatch({ input, type, regex }) {\n    const matches = input.match(regex);\n\n    if (matches) {\n      return { type, value: matches[1] };\n    }\n  }\n}\n","export default class Params {\n  /**\n   * @param {Object} params\n   */\n  constructor(params) {\n    this.params = params;\n    this.index = 0;\n  }\n\n  /**\n   * Returns param value that matches given placeholder with param key.\n   * @param {Object} token\n   *   @param {String} token.key Placeholder key\n   *   @param {String} token.value Placeholder value\n   * @return {String} param or token.value when params are missing\n   */\n  get({ key, value }) {\n    if (!this.params) {\n      return value;\n    }\n    if (key) {\n      return this.params[key];\n    }\n    return this.params[this.index++];\n  }\n}\n","import tokenTypes from \"./tokenTypes\";\nimport InlineBlock from \"./InlineBlock\";\nimport Indentation from \"./indentation\";\nimport Params from \"./Params\";\nimport includes from \"lodash/includes\";\n\nclass Formatter {\n  constructor(tokenizer) {\n    this.indentation = new Indentation(\"     \");\n    this.inlineBlock = new InlineBlock();\n    this.params = new Params(\"X\");\n\n    this.previousReservedWord = {};\n    this.tokens = [];\n    this.index = 0;\n  }\n  format = (tokens) => {\n    console.log(\"inside formatter\");\n    const finalSQL = this.getFormattedSQL(tokens);\n    return finalSQL;\n  };\n\n  getFormattedSQL = (tokens) => {\n    let finalSQL = \"\";\n    let previousReservedWord = {};\n\n    tokens.forEach((token, index) => {});\n\n    return finalSQL;\n  };\n}\n\nexport default Formatter;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Input from \"./components/input\";\nimport Output from \"./components/output\";\nimport Navbar from \"./components/navbar\";\nimport Button from \"./components/button\";\nimport Tokenizer from \"./tokenizer\";\nimport Formatter from \"./formatter\";\n\nclass App extends Component {\n  state = {\n    inpValue: \"\",\n  };\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <div className=\"container-fluid\" id=\"container\">\n          <Input onChange={this.handleChange} />\n          <Button onClick={this.handleSubmit} />\n          <Output />\n        </div>\n      </div>\n    );\n  }\n\n  handleChange = () => {\n    const inp = document.getElementById(\"inputSQL\").value;\n    console.log(inp);\n    this.setState({ inpValue: inp });\n  };\n\n  handleSubmit = () => {\n    const query = this.state.inpValue;\n    console.log(query.length);\n\n    // const formattedText = this.formatText(text);\n    // console.log(formattedText);\n    // document.getElementById(\"outputSQL\").value = formattedText;\n\n    const reservedWords = [\n      \"ACCESSIBLE\",\n      \"ACTION\",\n      \"AGAINST\",\n      \"AGGREGATE\",\n      \"ALGORITHM\",\n      \"ALL\",\n      \"ALTER\",\n      \"ANALYSE\",\n      \"ANALYZE\",\n      \"AS\",\n      \"ASC\",\n      \"AUTOCOMMIT\",\n      \"AUTO_INCREMENT\",\n      \"BACKUP\",\n      \"BEGIN\",\n      \"BETWEEN\",\n      \"BINLOG\",\n      \"BOTH\",\n      \"CASCADE\",\n      \"CASE\",\n      \"CHANGE\",\n      \"CHANGED\",\n      \"CHARACTER SET\",\n      \"CHARSET\",\n      \"CHECK\",\n      \"CHECKSUM\",\n      \"COLLATE\",\n      \"COLLATION\",\n      \"COLUMN\",\n      \"COLUMNS\",\n      \"COMMENT\",\n      \"COMMIT\",\n      \"COMMITTED\",\n      \"COMPRESSED\",\n      \"CONCURRENT\",\n      \"CONSTRAINT\",\n      \"CONTAINS\",\n      \"CONVERT\",\n      \"CREATE\",\n      \"CROSS\",\n      \"CURRENT_TIMESTAMP\",\n      \"DATABASE\",\n      \"DATABASES\",\n      \"DAY\",\n      \"DAY_HOUR\",\n      \"DAY_MINUTE\",\n      \"DAY_SECOND\",\n      \"DEFAULT\",\n      \"DEFINER\",\n      \"DELAYED\",\n      \"DELETE\",\n      \"DESC\",\n      \"DESCRIBE\",\n      \"DETERMINISTIC\",\n      \"DISTINCT\",\n      \"DISTINCTROW\",\n      \"DIV\",\n      \"DO\",\n      \"DROP\",\n      \"DUMPFILE\",\n      \"DUPLICATE\",\n      \"DYNAMIC\",\n      \"ELSE\",\n      \"ENCLOSED\",\n      \"END\",\n      \"ENGINE\",\n      \"ENGINES\",\n      \"ENGINE_TYPE\",\n      \"ESCAPE\",\n      \"ESCAPED\",\n      \"EVENTS\",\n      \"EXEC\",\n      \"EXECUTE\",\n      \"EXISTS\",\n      \"EXPLAIN\",\n      \"EXTENDED\",\n      \"FAST\",\n      \"FETCH\",\n      \"FIELDS\",\n      \"FILE\",\n      \"FIRST\",\n      \"FIXED\",\n      \"FLUSH\",\n      \"FOR\",\n      \"FORCE\",\n      \"FOREIGN\",\n      \"FULL\",\n      \"FULLTEXT\",\n      \"FUNCTION\",\n      \"GLOBAL\",\n      \"GRANT\",\n      \"GRANTS\",\n      \"GROUP_CONCAT\",\n      \"HEAP\",\n      \"HIGH_PRIORITY\",\n      \"HOSTS\",\n      \"HOUR\",\n      \"HOUR_MINUTE\",\n      \"HOUR_SECOND\",\n      \"IDENTIFIED\",\n      \"IF\",\n      \"IFNULL\",\n      \"IGNORE\",\n      \"IN\",\n      \"INDEX\",\n      \"INDEXES\",\n      \"INFILE\",\n      \"INSERT\",\n      \"INSERT_ID\",\n      \"INSERT_METHOD\",\n      \"INTERVAL\",\n      \"INTO\",\n      \"INVOKER\",\n      \"IS\",\n      \"ISOLATION\",\n      \"KEY\",\n      \"KEYS\",\n      \"KILL\",\n      \"LAST_INSERT_ID\",\n      \"LEADING\",\n      \"LEVEL\",\n      \"LIKE\",\n      \"LINEAR\",\n      \"LINES\",\n      \"LOAD\",\n      \"LOCAL\",\n      \"LOCK\",\n      \"LOCKS\",\n      \"LOGS\",\n      \"LOW_PRIORITY\",\n      \"MARIA\",\n      \"MASTER\",\n      \"MASTER_CONNECT_RETRY\",\n      \"MASTER_HOST\",\n      \"MASTER_LOG_FILE\",\n      \"MATCH\",\n      \"MAX_CONNECTIONS_PER_HOUR\",\n      \"MAX_QUERIES_PER_HOUR\",\n      \"MAX_ROWS\",\n      \"MAX_UPDATES_PER_HOUR\",\n      \"MAX_USER_CONNECTIONS\",\n      \"MEDIUM\",\n      \"MERGE\",\n      \"MINUTE\",\n      \"MINUTE_SECOND\",\n      \"MIN_ROWS\",\n      \"MODE\",\n      \"MODIFY\",\n      \"MONTH\",\n      \"MRG_MYISAM\",\n      \"MYISAM\",\n      \"NAMES\",\n      \"NATURAL\",\n      \"NOT\",\n      \"NOW()\",\n      \"NULL\",\n      \"OFFSET\",\n      \"ON DELETE\",\n      \"ON UPDATE\",\n      \"ON\",\n      \"ONLY\",\n      \"OPEN\",\n      \"OPTIMIZE\",\n      \"OPTION\",\n      \"OPTIONALLY\",\n      \"OUTFILE\",\n      \"PACK_KEYS\",\n      \"PAGE\",\n      \"PARTIAL\",\n      \"PARTITION\",\n      \"PARTITIONS\",\n      \"PASSWORD\",\n      \"PRIMARY\",\n      \"PRIVILEGES\",\n      \"PROCEDURE\",\n      \"PROCESS\",\n      \"PROCESSLIST\",\n      \"PURGE\",\n      \"QUICK\",\n      \"RAID0\",\n      \"RAID_CHUNKS\",\n      \"RAID_CHUNKSIZE\",\n      \"RAID_TYPE\",\n      \"RANGE\",\n      \"READ\",\n      \"READ_ONLY\",\n      \"READ_WRITE\",\n      \"REFERENCES\",\n      \"REGEXP\",\n      \"RELOAD\",\n      \"RENAME\",\n      \"REPAIR\",\n      \"REPEATABLE\",\n      \"REPLACE\",\n      \"REPLICATION\",\n      \"RESET\",\n      \"RESTORE\",\n      \"RESTRICT\",\n      \"RETURN\",\n      \"RETURNS\",\n      \"REVOKE\",\n      \"RLIKE\",\n      \"ROLLBACK\",\n      \"ROW\",\n      \"ROWS\",\n      \"ROW_FORMAT\",\n      \"SECOND\",\n      \"SECURITY\",\n      \"SEPARATOR\",\n      \"SERIALIZABLE\",\n      \"SESSION\",\n      \"SHARE\",\n      \"SHOW\",\n      \"SHUTDOWN\",\n      \"SLAVE\",\n      \"SONAME\",\n      \"SOUNDS\",\n      \"SQL\",\n      \"SQL_AUTO_IS_NULL\",\n      \"SQL_BIG_RESULT\",\n      \"SQL_BIG_SELECTS\",\n      \"SQL_BIG_TABLES\",\n      \"SQL_BUFFER_RESULT\",\n      \"SQL_CACHE\",\n      \"SQL_CALC_FOUND_ROWS\",\n      \"SQL_LOG_BIN\",\n      \"SQL_LOG_OFF\",\n      \"SQL_LOG_UPDATE\",\n      \"SQL_LOW_PRIORITY_UPDATES\",\n      \"SQL_MAX_JOIN_SIZE\",\n      \"SQL_NO_CACHE\",\n      \"SQL_QUOTE_SHOW_CREATE\",\n      \"SQL_SAFE_UPDATES\",\n      \"SQL_SELECT_LIMIT\",\n      \"SQL_SLAVE_SKIP_COUNTER\",\n      \"SQL_SMALL_RESULT\",\n      \"SQL_WARNINGS\",\n      \"START\",\n      \"STARTING\",\n      \"STATUS\",\n      \"STOP\",\n      \"STORAGE\",\n      \"STRAIGHT_JOIN\",\n      \"STRING\",\n      \"STRIPED\",\n      \"SUPER\",\n      \"TABLE\",\n      \"TABLES\",\n      \"TEMPORARY\",\n      \"TERMINATED\",\n      \"THEN\",\n      \"TO\",\n      \"TRAILING\",\n      \"TRANSACTIONAL\",\n      \"TRUE\",\n      \"TRUNCATE\",\n      \"TYPE\",\n      \"TYPES\",\n      \"UNCOMMITTED\",\n      \"UNIQUE\",\n      \"UNLOCK\",\n      \"UNSIGNED\",\n      \"USAGE\",\n      \"USE\",\n      \"USING\",\n      \"VARIABLES\",\n      \"VIEW\",\n      \"WHEN\",\n      \"WITH\",\n      \"WORK\",\n      \"WRITE\",\n      \"YEAR_MONTH\",\n    ];\n\n    const reservedToplevelWords = [\n      \"ADD\",\n      \"AFTER\",\n      \"ALTER COLUMN\",\n      \"ALTER TABLE\",\n      \"DELETE FROM\",\n      \"EXCEPT\",\n      \"FETCH FIRST\",\n      \"FROM\",\n      \"GROUP BY\",\n      \"GO\",\n      \"HAVING\",\n      \"INSERT INTO\",\n      \"INSERT\",\n      \"INTERSECT\",\n      \"LIMIT\",\n      \"MODIFY\",\n      \"ORDER BY\",\n      \"SELECT\",\n      \"SET CURRENT SCHEMA\",\n      \"SET SCHEMA\",\n      \"SET\",\n      \"UNION ALL\",\n      \"UNION\",\n      \"UPDATE\",\n      \"VALUES\",\n      \"WHERE\",\n    ];\n\n    const reservedNewlineWords = [\n      \"AND\",\n      \"CROSS APPLY\",\n      \"CROSS JOIN\",\n      \"ELSE\",\n      \"INNER JOIN\",\n      \"JOIN\",\n      \"LEFT JOIN\",\n      \"LEFT OUTER JOIN\",\n      \"OR\",\n      \"OUTER APPLY\",\n      \"OUTER JOIN\",\n      \"RIGHT JOIN\",\n      \"RIGHT OUTER JOIN\",\n      \"WHEN\",\n      \"XOR\",\n    ];\n\n    let tokenizer = new Tokenizer({\n      reservedWords,\n      reservedToplevelWords,\n      reservedNewlineWords,\n      stringTypes: [`\"\"`, \"N''\", \"''\", \"``\", \"[]\"],\n      openParens: [\"(\", \"CASE\"],\n      closeParens: [\")\", \"END\"],\n      indexedPlaceholderTypes: [\"?\"],\n      namedPlaceholderTypes: [\"@\", \":\"],\n      lineCommentTypes: [\"#\", \"--\"],\n    });\n\n    const tokens = tokenizer.tokenize(query);\n\n    let f = new Formatter();\n    const finalSQL = f.format(tokens);\n    console.log(tokens);\n    document.getElementById(\"outputSQL\").value = finalSQL;\n  };\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}