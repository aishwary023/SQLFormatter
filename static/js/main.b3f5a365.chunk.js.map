{"version":3,"sources":["components/input.jsx","components/output.jsx","components/navbar.jsx","components/button.jsx","tokenTypes.js","tokenizer.js","Params.js","Indentation.js","inlineBlock.js","formatter.js","Validiator.js","App.js","index.js"],"names":["Input","state","className","id","onChange","this","props","placeholder","Component","Output","Navbar","Button","onClick","value","WHITESPACE","WORD","STRING","RESERVED","RESERVED_TOPLEVEL","RESERVED_NEWLINE","OPERATOR","OPEN_PAREN","CLOSE_PAREN","LINE_COMMENT","BLOCK_COMMENT","NUMBER","PLACEHOLDER","Tokenizer","cfg","WHITESPACE_REGEX","NUMBER_REGEX","OPERATOR_REGEX","BLOCK_COMMENT_REGEX","LINE_COMMENT_REGEX","createLineCommentRegex","lineCommentTypes","RESERVED_TOPLEVEL_REGEX","createReservedWordRegex","reservedToplevelWords","RESERVED_NEWLINE_REGEX","reservedNewlineWords","RESERVED_PLAIN_REGEX","reservedWords","WORD_REGEX","createWordRegex","specialWordChars","STRING_REGEX","createStringRegex","stringTypes","OPEN_PAREN_REGEX","createParenRegex","openParens","CLOSE_PAREN_REGEX","closeParens","INDEXED_PLACEHOLDER_REGEX","createPlaceholderRegex","indexedPlaceholderTypes","IDENT_NAMED_PLACEHOLDER_REGEX","namedPlaceholderTypes","STRING_NAMED_PLACEHOLDER_REGEX","createStringPattern","RegExp","map","c","escapeRegExp","join","reservedWordsPattern","replace","specialChars","patterns","t","parens","p","escapeParen","paren","length","types","pattern","isEmpty","typesRegex","input","token","tokens","getNextToken","substring","push","previousToken","getWhitespaceToken","getCommentToken","getStringToken","getOpenParenToken","getCloseParenToken","getPlaceholderToken","getNumberToken","getReservedWordToken","getWordToken","getOperatorToken","getTokenOnFirstMatch","type","tokenTypes","regex","getLineCommentToken","getBlockCommentToken","getIdentNamedPlaceholderToken","getStringNamedPlaceholderToken","getIndexedPlaceholderToken","getPlaceholderTokenWithKey","parseKey","v","slice","getEscapedPlaceholderKey","key","quoteChar","getToplevelReservedToken","getNewlineReservedToken","getPlainReservedToken","matches","match","Params","params","index","Indentation","indent","indentTypes","repeat","last","pop","InlineBlock","level","isInlineBlock","i","isForbiddenToken","COMMENT","Formatter","format","console","log","globalTokens","getFormattedSQL","indentation","inlineBlock","previousReservedWord","formattedQuery","forEach","formatLineComment","formatBlockComment","formatToplevelReservedWord","formatNewlineReservedWord","formatWithSpaces","formatOpeningParentheses","formatClosingParentheses","formatPlaceholder","formatComma","formatWithSpaceAfter","formatWithoutSpaces","formatQuerySeparator","query","addNewline","indentComment","comment","getIndent","decreaseTopLevel","increaseToplevel","equalizeWhitespace","string","preserveWhitespaceFor","includes","trimEnd","beginIfPossible","isActive","increaseBlockLevel","end","decreaseBlockLevel","get","trimTrailingWhitespace","test","previousNonWhitespaceToken","n","offset","Validiator","validiate","syntaxIsCorrect","App","inpValue","handleSubmitSyntax","tokenize","alert","handleChange","inp","document","getElementById","setState","handleSubmit","finalSQL","ReactDOM","render","StrictMode"],"mappings":"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AKsI,YAAYqB,c,6CAG3BJ,GACrB,OAAIvJ,KAAK2K,6BAA6B9E,OAASC,EAAW5E,aACjDgJ,IAAQX,GAAS,KAEjBW,IAAQX,K,mDAMjB,IADA,IAAIqB,EAAI,EACD5K,KAAKiF,cAAc2F,GAAG/E,OAASC,EAAWrF,YAC/CmK,IAEF,OAAO5K,KAAKiF,cAAc2F,K,sCAGD,IAAbC,EAAY,uDAAH,EACrB,OAAO7K,KAAKoI,aAAapI,KAAKmH,MAAQ0D,IAAW,O,KCjKtCC,E,4MAhBbC,UAAY,SAAClG,GACX,QAAI,EAAKmG,iB,EAIXA,gBAAkB,SAACnG,GAOjB,OAJAA,EAAO6D,SAAQ,SAAC9D,GACDA,EAAMpE,UAHT,G,YAPSL,aCstBV8K,E,4MA7sBbrL,MAAQ,CACNsL,SAAU,I,EAkBZC,mBAAqB,WACnB,IA6UItG,EAXY,IAAIvD,EAAU,CAC5Be,cAnUoB,CACpB,aACA,SACA,UACA,YACA,YACA,MACA,QACA,UACA,UACA,KACA,MACA,aACA,iBACA,SACA,QACA,UACA,SACA,OACA,UACA,OACA,SACA,UACA,gBACA,UACA,QACA,WACA,UACA,YACA,SACA,UACA,UACA,SACA,YACA,aACA,aACA,aACA,WACA,UACA,SACA,QACA,oBACA,WACA,YACA,MACA,WACA,aACA,aACA,UACA,UACA,UACA,SACA,OACA,WACA,gBACA,WACA,cACA,MACA,KACA,OACA,WACA,YACA,UACA,OACA,WACA,MACA,SACA,UACA,cACA,SACA,UACA,SACA,OACA,UACA,SACA,UACA,WACA,OACA,QACA,SACA,OACA,QACA,QACA,QACA,MACA,QACA,UACA,OACA,WACA,WACA,SACA,QACA,SACA,eACA,OACA,gBACA,QACA,OACA,cACA,cACA,aACA,KACA,SACA,SACA,KACA,QACA,UACA,SACA,SACA,YACA,gBACA,WACA,OACA,UACA,KACA,YACA,MACA,OACA,OACA,iBACA,UACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,QACA,OACA,eACA,QACA,SACA,uBACA,cACA,kBACA,QACA,2BACA,uBACA,WACA,uBACA,uBACA,SACA,QACA,SACA,gBACA,WACA,OACA,SACA,QACA,aACA,SACA,QACA,UACA,MACA,QACA,OACA,SACA,YACA,YACA,KACA,OACA,OACA,WACA,SACA,aACA,UACA,YACA,OACA,UACA,YACA,aACA,WACA,UACA,aACA,YACA,UACA,cACA,QACA,QACA,QACA,cACA,iBACA,YACA,QACA,OACA,YACA,aACA,aACA,SACA,SACA,SACA,SACA,aACA,UACA,cACA,QACA,UACA,WACA,SACA,UACA,SACA,QACA,WACA,MACA,OACA,aACA,SACA,WACA,YACA,eACA,UACA,QACA,OACA,WACA,QACA,SACA,SACA,MACA,mBACA,iBACA,kBACA,iBACA,oBACA,YACA,sBACA,cACA,cACA,iBACA,2BACA,oBACA,eACA,wBACA,mBACA,mBACA,yBACA,mBACA,eACA,QACA,WACA,SACA,OACA,UACA,gBACA,SACA,UACA,QACA,QACA,SACA,YACA,aACA,OACA,KACA,WACA,gBACA,OACA,WACA,OACA,QACA,cACA,SACA,SACA,WACA,QACA,MACA,QACA,YACA,OACA,OACA,OACA,OACA,QACA,cAoDAJ,sBAjD4B,CAC5B,MACA,QACA,eACA,cACA,cACA,SACA,cACA,OACA,WACA,KACA,SACA,cACA,SACA,YACA,QACA,SACA,WACA,SACA,qBACA,aACA,MACA,YACA,QACA,SACA,SACA,SAwBAE,qBArB2B,CAC3B,MACA,cACA,aACA,OACA,aACA,OACA,YACA,kBACA,KACA,cACA,aACA,aACA,mBACA,OACA,OAOAQ,YAAa,CAAC,KAAM,MAAO,KAAM,KAAM,MACvCG,WAAY,CAAC,IAAK,QAClBE,YAAa,CAAC,IAAK,OACnBG,wBAAyB,CAAC,KAC1BE,sBAAuB,CAAC,IAAK,KAC7BvB,iBAAkB,CAAC,IAAK,QAEHsJ,SAAS,EAAKxL,MAAMsL,UAE3ChD,QAAQC,IAAI,YAAatD,GAErBiG,EAAYO,MAAM,aACjBA,MAAM,8C,EAGbC,aAAe,WACb,IAAMC,EAAMC,SAASC,eAAe,YAAYjL,MAChD0H,QAAQC,IAAIoD,GACZ,EAAKG,SAAS,CAAER,SAAUK,K,EAG5BI,aAAe,WACb,IAAMpC,EAAQ,EAAK3J,MAAMsL,SACzBhD,QAAQC,IAAIoB,EAAMjF,QAMlB,IA8UMO,EAZU,IAAIvD,EAAU,CAC5Be,cAnUoB,CACpB,aACA,SACA,UACA,YACA,YACA,MACA,QACA,UACA,UACA,KACA,MACA,aACA,iBACA,SACA,QACA,UACA,SACA,OACA,UACA,OACA,SACA,UACA,gBACA,UACA,QACA,WACA,UACA,YACA,SACA,UACA,UACA,SACA,YACA,aACA,aACA,aACA,WACA,UACA,SACA,QACA,oBACA,WACA,YACA,MACA,WACA,aACA,aACA,UACA,UACA,UACA,SACA,OACA,WACA,gBACA,WACA,cACA,MACA,KACA,OACA,WACA,YACA,UACA,OACA,WACA,MACA,SACA,UACA,cACA,SACA,UACA,SACA,OACA,UACA,SACA,UACA,WACA,OACA,QACA,SACA,OACA,QACA,QACA,QACA,MACA,QACA,UACA,OACA,WACA,WACA,SACA,QACA,SACA,eACA,OACA,gBACA,QACA,OACA,cACA,cACA,aACA,KACA,SACA,SACA,KACA,QACA,UACA,SACA,SACA,YACA,gBACA,WACA,OACA,UACA,KACA,YACA,MACA,OACA,OACA,iBACA,UACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,QACA,OACA,eACA,QACA,SACA,uBACA,cACA,kBACA,QACA,2BACA,uBACA,WACA,uBACA,uBACA,SACA,QACA,SACA,gBACA,WACA,OACA,SACA,QACA,aACA,SACA,QACA,UACA,MACA,QACA,OACA,SACA,YACA,YACA,KACA,OACA,OACA,WACA,SACA,aACA,UACA,YACA,OACA,UACA,YACA,aACA,WACA,UACA,aACA,YACA,UACA,cACA,QACA,QACA,QACA,cACA,iBACA,YACA,QACA,OACA,YACA,aACA,aACA,SACA,SACA,SACA,SACA,aACA,UACA,cACA,QACA,UACA,WACA,SACA,UACA,SACA,QACA,WACA,MACA,OACA,aACA,SACA,WACA,YACA,eACA,UACA,QACA,OACA,WACA,QACA,SACA,SACA,MACA,mBACA,iBACA,kBACA,iBACA,oBACA,YACA,sBACA,cACA,cACA,iBACA,2BACA,oBACA,eACA,wBACA,mBACA,mBACA,yBACA,mBACA,eACA,QACA,WACA,SACA,OACA,UACA,gBACA,SACA,UACA,QACA,QACA,SACA,YACA,aACA,OACA,KACA,WACA,gBACA,OACA,WACA,OACA,QACA,cACA,SACA,SACA,WACA,QACA,MACA,QACA,YACA,OACA,OACA,OACA,OACA,QACA,cAoDAJ,sBAjD4B,CAC5B,MACA,QACA,eACA,cACA,cACA,SACA,cACA,OACA,WACA,KACA,SACA,cACA,SACA,YACA,QACA,SACA,WACA,SACA,qBACA,aACA,MACA,YACA,QACA,SACA,SACA,SAwBAE,qBArB2B,CAC3B,MACA,cACA,aACA,OACA,aACA,OACA,YACA,kBACA,KACA,cACA,aACA,aACA,mBACA,OACA,OAOAQ,YAAa,CAAC,KAAM,MAAO,KAAM,KAAM,MACvCG,WAAY,CAAC,IAAK,QAClBE,YAAa,CAAC,IAAK,OACnBG,wBAAyB,CAAC,KAC1BE,sBAAuB,CAAC,IAAK,KAC7BvB,iBAAkB,CAAC,IAAK,QAGDsJ,SAAS7B,GAClC,EAAKnB,aAAevD,EACpB,IACM+G,GADE,IAAI5D,GACOC,OAAOpD,GAC1BqD,QAAQC,IAAItD,GACZ2G,SAASC,eAAe,aAAajL,MAAQoL,G,uDArsB7C,OACE,6BACE,kBAAC,EAAD,MACA,yBAAK/L,UAAU,kBAAkBC,GAAG,aAClC,kBAAC,EAAD,CAAOC,SAAUC,KAAKsL,eACtB,yBAAKxL,GAAG,gBACN,kBAAC,EAAD,CAAQS,QAASP,KAAK2L,aAAcnL,MAAM,YAC1C,kBAAC,EAAD,CAAQD,QAASP,KAAKmL,mBAAoB3K,MAAM,gBAElD,kBAAC,EAAD,Y,GAfQL,aCLlB0L,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFP,SAASC,eAAe,W","file":"static/js/main.b3f5a365.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Input extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div className=\"input-group\" id=\"inputText\">\n        <div className=\"input-group-prepend\"></div>\n        <textarea\n          id=\"inputSQL\"\n          className=\"form-control\"\n          onChange={this.props.onChange}\n          placeholder=\"Input SQL Query here!\"\n        ></textarea>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from \"react\";\n\nclass Output extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"input-group\" id=\"outputText\">\n        <div className=\"input-group-prepend\"></div>\n        <textarea\n          className=\"form-control\"\n          id=\"outputSQL\"\n          placeholder=\"Formatted SQL will appear here!\"\n        ></textarea>\n      </div>\n    );\n  }\n}\n\nexport default Output;\n","import React, { Component } from \"react\";\n\nclass Navbar extends Component {\n  state = {};\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <span className=\"navbar-brand mb-0 h1\">SQLFormatter</span>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass Button extends Component {\n  state = {};\n  render() {\n    return (\n      <button\n        className=\"btn btn-warning btn-lg \"\n        id=\"formatBtn\"\n        onClick={this.props.onClick}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","//conatins list of different types of tokens\n\nexport default {\n  WHITESPACE: \"whitespace\",\n  WORD: \"word\",\n  STRING: \"string\",\n  RESERVED: \"reserved\",\n  RESERVED_TOPLEVEL: \"reserved-toplevel\",\n  RESERVED_NEWLINE: \"reserved-newline\",\n  OPERATOR: \"operator\",\n  OPEN_PAREN: \"open-paren\",\n  CLOSE_PAREN: \"close-paren\",\n  LINE_COMMENT: \"line-comment\",\n  BLOCK_COMMENT: \"block-comment\",\n  NUMBER: \"number\",\n  PLACEHOLDER: \"placeholder\",\n};\n","import isEmpty from \"lodash/isEmpty\";\nimport escapeRegExp from \"lodash/escapeRegExp\";\nimport tokenTypes from \"./tokenTypes\";\n\nexport default class Tokenizer {\n  constructor(cfg) {\n    this.WHITESPACE_REGEX = /^(\\s+)/;\n    this.NUMBER_REGEX = /^((-\\s*)?[0-9]+(\\.[0-9]+)?|0x[0-9a-fA-F]+|0b[01]+)\\b/;\n    this.OPERATOR_REGEX = /^(!=|<>|==|<=|>=|!<|!>|\\|\\||::|->>|->|~~\\*|~~|!~~\\*|!~~|~\\*|!~\\*|!~|.)/;\n\n    this.BLOCK_COMMENT_REGEX = /^(\\/\\*[^]*?(?:\\*\\/|$))/;\n    this.LINE_COMMENT_REGEX = this.createLineCommentRegex(cfg.lineCommentTypes);\n\n    this.RESERVED_TOPLEVEL_REGEX = this.createReservedWordRegex(\n      cfg.reservedToplevelWords\n    );\n    this.RESERVED_NEWLINE_REGEX = this.createReservedWordRegex(\n      cfg.reservedNewlineWords\n    );\n    this.RESERVED_PLAIN_REGEX = this.createReservedWordRegex(cfg.reservedWords);\n\n    this.WORD_REGEX = this.createWordRegex(cfg.specialWordChars);\n    this.STRING_REGEX = this.createStringRegex(cfg.stringTypes);\n\n    this.OPEN_PAREN_REGEX = this.createParenRegex(cfg.openParens);\n    this.CLOSE_PAREN_REGEX = this.createParenRegex(cfg.closeParens);\n\n    this.INDEXED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(\n      cfg.indexedPlaceholderTypes,\n      \"[0-9]*\"\n    );\n    this.IDENT_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(\n      cfg.namedPlaceholderTypes,\n      \"[a-zA-Z0-9._$]+\"\n    );\n    this.STRING_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(\n      cfg.namedPlaceholderTypes,\n      this.createStringPattern(cfg.stringTypes)\n    );\n  }\n\n  createLineCommentRegex(lineCommentTypes) {\n    return new RegExp(\n      `^((?:${lineCommentTypes\n        .map((c) => escapeRegExp(c))\n        .join(\"|\")}).*?(?:\\n|$))`\n    );\n  }\n\n  createReservedWordRegex(reservedWords) {\n    const reservedWordsPattern = reservedWords.join(\"|\").replace(/ /g, \"\\\\s+\");\n    return new RegExp(`^(${reservedWordsPattern})\\\\b`, \"i\");\n  }\n\n  createWordRegex(specialChars = []) {\n    return new RegExp(`^([\\\\w${specialChars.join(\"\")}]+)`);\n  }\n\n  createStringRegex(stringTypes) {\n    return new RegExp(\"^(\" + this.createStringPattern(stringTypes) + \")\");\n  }\n\n  createStringPattern(stringTypes) {\n    const patterns = {\n      \"``\": \"((`[^`]*($|`))+)\",\n      \"[]\": \"((\\\\[[^\\\\]]*($|\\\\]))(\\\\][^\\\\]]*($|\\\\]))*)\",\n      '\"\"': '((\"[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*(\"|$))+)',\n      \"''\": \"(('[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n      \"N''\": \"((N'[^N'\\\\\\\\]*(?:\\\\\\\\.[^N'\\\\\\\\]*)*('|$))+)\",\n    };\n\n    return stringTypes.map((t) => patterns[t]).join(\"|\");\n  }\n\n  createParenRegex(parens) {\n    return new RegExp(\n      \"^(\" + parens.map((p) => this.escapeParen(p)).join(\"|\") + \")\",\n      \"i\"\n    );\n  }\n\n  escapeParen(paren) {\n    if (paren.length === 1) {\n      return escapeRegExp(paren);\n    } else {\n      return \"\\\\b\" + paren + \"\\\\b\";\n    }\n  }\n\n  createPlaceholderRegex(types, pattern) {\n    if (isEmpty(types)) {\n      return false;\n    }\n    const typesRegex = types.map(escapeRegExp).join(\"|\");\n\n    return new RegExp(`^((?:${typesRegex})(?:${pattern}))`);\n  }\n\n  tokenize(input) {\n    const tokens = [];\n    let token;\n\n    while (input.length) {\n      token = this.getNextToken(input, token);\n\n      input = input.substring(token.value.length);\n\n      tokens.push(token);\n    }\n    return tokens;\n  }\n\n  getNextToken(input, previousToken) {\n    return (\n      this.getWhitespaceToken(input) ||\n      this.getCommentToken(input) ||\n      this.getStringToken(input) ||\n      this.getOpenParenToken(input) ||\n      this.getCloseParenToken(input) ||\n      this.getPlaceholderToken(input) ||\n      this.getNumberToken(input) ||\n      this.getReservedWordToken(input, previousToken) ||\n      this.getWordToken(input) ||\n      this.getOperatorToken(input)\n    );\n  }\n\n  getWhitespaceToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.WHITESPACE,\n      regex: this.WHITESPACE_REGEX,\n    });\n  }\n\n  getCommentToken(input) {\n    return this.getLineCommentToken(input) || this.getBlockCommentToken(input);\n  }\n\n  getLineCommentToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.LINE_COMMENT,\n      regex: this.LINE_COMMENT_REGEX,\n    });\n  }\n\n  getBlockCommentToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.BLOCK_COMMENT,\n      regex: this.BLOCK_COMMENT_REGEX,\n    });\n  }\n\n  getStringToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.STRING,\n      regex: this.STRING_REGEX,\n    });\n  }\n\n  getOpenParenToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.OPEN_PAREN,\n      regex: this.OPEN_PAREN_REGEX,\n    });\n  }\n\n  getCloseParenToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.CLOSE_PAREN,\n      regex: this.CLOSE_PAREN_REGEX,\n    });\n  }\n\n  getPlaceholderToken(input) {\n    return (\n      this.getIdentNamedPlaceholderToken(input) ||\n      this.getStringNamedPlaceholderToken(input) ||\n      this.getIndexedPlaceholderToken(input)\n    );\n  }\n\n  getIdentNamedPlaceholderToken(input) {\n    return this.getPlaceholderTokenWithKey({\n      input,\n      regex: this.IDENT_NAMED_PLACEHOLDER_REGEX,\n      parseKey: (v) => v.slice(1),\n    });\n  }\n\n  getStringNamedPlaceholderToken(input) {\n    return this.getPlaceholderTokenWithKey({\n      input,\n      regex: this.STRING_NAMED_PLACEHOLDER_REGEX,\n      parseKey: (v) =>\n        this.getEscapedPlaceholderKey({\n          key: v.slice(2, -1),\n          quoteChar: v.slice(-1),\n        }),\n    });\n  }\n\n  getIndexedPlaceholderToken(input) {\n    return this.getPlaceholderTokenWithKey({\n      input,\n      regex: this.INDEXED_PLACEHOLDER_REGEX,\n      parseKey: (v) => v.slice(1),\n    });\n  }\n\n  getPlaceholderTokenWithKey({ input, regex, parseKey }) {\n    const token = this.getTokenOnFirstMatch({\n      input,\n      regex,\n      type: tokenTypes.PLACEHOLDER,\n    });\n    if (token) {\n      token.key = parseKey(token.value);\n    }\n    return token;\n  }\n\n  getEscapedPlaceholderKey({ key, quoteChar }) {\n    return key.replace(\n      new RegExp(escapeRegExp(\"\\\\\") + quoteChar, \"g\"),\n      quoteChar\n    );\n  }\n\n  getNumberToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.NUMBER,\n      regex: this.NUMBER_REGEX,\n    });\n  }\n\n  getOperatorToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.OPERATOR,\n      regex: this.OPERATOR_REGEX,\n    });\n  }\n\n  getReservedWordToken(input, previousToken) {\n    if (previousToken && previousToken.value && previousToken.value === \".\") {\n      return;\n    }\n    return (\n      this.getToplevelReservedToken(input) ||\n      this.getNewlineReservedToken(input) ||\n      this.getPlainReservedToken(input)\n    );\n  }\n\n  getToplevelReservedToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED_TOPLEVEL,\n      regex: this.RESERVED_TOPLEVEL_REGEX,\n    });\n  }\n\n  getNewlineReservedToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED_NEWLINE,\n      regex: this.RESERVED_NEWLINE_REGEX,\n    });\n  }\n\n  getPlainReservedToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED,\n      regex: this.RESERVED_PLAIN_REGEX,\n    });\n  }\n\n  getWordToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.WORD,\n      regex: this.WORD_REGEX,\n    });\n  }\n\n  getTokenOnFirstMatch({ input, type, regex }) {\n    const matches = input.match(regex);\n\n    if (matches) {\n      return { type, value: matches[1] };\n    }\n  }\n}\n","export default class Params {\n  constructor(params) {\n    this.params = params;\n    this.index = 0;\n  }\n  get({ key, value }) {\n    if (!this.params) {\n      return value;\n    }\n    if (key) {\n      return this.params[key];\n    }\n    return this.params[this.index++];\n  }\n}\n","import repeat from \"lodash/repeat\";\nimport last from \"lodash/last\";\n\nconst INDENT_TYPE_TOP_LEVEL = \"top-level\";\nconst INDENT_TYPE_BLOCK_LEVEL = \"block-level\";\n\nexport default class Indentation {\n  constructor(indent) {\n    this.indent = indent;\n    this.indentTypes = [];\n  }\n\n  getIndent() {\n    return repeat(this.indent, this.indentTypes.length);\n  }\n\n  increaseToplevel() {\n    this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n  }\n\n  increaseBlockLevel() {\n    this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n  }\n\n  decreaseTopLevel() {\n    if (last(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n      this.indentTypes.pop();\n    }\n  }\n\n  decreaseBlockLevel() {\n    while (this.indentTypes.length > 0) {\n      const type = this.indentTypes.pop();\n      if (type !== INDENT_TYPE_TOP_LEVEL) {\n        break;\n      }\n    }\n  }\n}\n","import tokenTypes from \"./tokenTypes\";\n\nconst INLINE_MAX_LENGTH = 50;\n\nexport default class InlineBlock {\n  constructor() {\n    this.level = 0;\n  }\n\n  beginIfPossible(tokens, index) {\n    if (this.level === 0 && this.isInlineBlock(tokens, index)) {\n      this.level = 1;\n    } else if (this.level > 0) {\n      this.level++;\n    } else {\n      this.level = 0;\n    }\n  }\n\n  end() {\n    this.level--;\n  }\n\n  isActive() {\n    return this.level > 0;\n  }\n\n  isInlineBlock(tokens, index) {\n    let length = 0;\n    let level = 0;\n\n    for (let i = index; i < tokens.length; i++) {\n      const token = tokens[i];\n      length += token.value.length;\n\n      if (length > INLINE_MAX_LENGTH) {\n        return false;\n      }\n\n      if (token.type === tokenTypes.OPEN_PAREN) {\n        level++;\n      } else if (token.type === tokenTypes.CLOSE_PAREN) {\n        level--;\n        if (level === 0) {\n          return true;\n        }\n      }\n\n      if (this.isForbiddenToken(token)) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  isForbiddenToken({ type, value }) {\n    return (\n      type === tokenTypes.RESERVED_TOPLEVEL ||\n      type === tokenTypes.RESERVED_NEWLINE ||\n      type === tokenTypes.COMMENT ||\n      type === tokenTypes.BLOCK_COMMENT ||\n      value === \";\"\n    );\n  }\n}\n","import tokenTypes from \"./tokenTypes\";\nimport Params from \"./Params\";\nimport includes from \"lodash/includes\";\nimport trimEnd from \"lodash/trimEnd\";\nimport Indentation from \"./Indentation\";\nimport InlineBlock from \"./inlineBlock\";\n\nclass Formatter {\n  constructor() {\n    this.globalTokens = [];\n    this.indentation = new Indentation(\"\\t\\t\");\n    this.inlineBlock = new InlineBlock();\n    this.params = new Params(\"\");\n    this.index = 0;\n    this.previousReservedWord = {};\n  }\n\n  format = (tokens) => {\n    console.log(\"inside formatter\");\n    this.globalTokens = [...tokens];\n    const finalSQL = this.getFormattedSQL(tokens);\n    return finalSQL;\n  };\n\n  getFormattedSQL(tokens) {\n    let formattedQuery = \"\";\n\n    tokens.forEach((token, index) => {\n      this.index = index;\n\n      if (token.type === tokenTypes.WHITESPACE) {\n      } else if (token.type === tokenTypes.LINE_COMMENT) {\n        formattedQuery = this.formatLineComment(token, formattedQuery);\n      } else if (token.type === tokenTypes.BLOCK_COMMENT) {\n        formattedQuery = this.formatBlockComment(token, formattedQuery);\n      } else if (token.type === tokenTypes.RESERVED_TOPLEVEL) {\n        formattedQuery = this.formatToplevelReservedWord(token, formattedQuery);\n        this.previousReservedWord = token;\n      } else if (token.type === tokenTypes.RESERVED_NEWLINE) {\n        formattedQuery = this.formatNewlineReservedWord(token, formattedQuery);\n        this.previousReservedWord = token;\n      } else if (token.type === tokenTypes.RESERVED) {\n        formattedQuery = this.formatWithSpaces(token, formattedQuery);\n        this.previousReservedWord = token;\n      } else if (token.type === tokenTypes.OPEN_PAREN) {\n        formattedQuery = this.formatOpeningParentheses(token, formattedQuery);\n      } else if (token.type === tokenTypes.CLOSE_PAREN) {\n        formattedQuery = this.formatClosingParentheses(token, formattedQuery);\n      } else if (token.type === tokenTypes.PLACEHOLDER) {\n        formattedQuery = this.formatPlaceholder(token, formattedQuery);\n      } else if (token.value === \",\") {\n        formattedQuery = this.formatComma(token, formattedQuery);\n      } else if (token.value === \":\") {\n        formattedQuery = this.formatWithSpaceAfter(token, formattedQuery);\n      } else if (token.value === \".\") {\n        formattedQuery = this.formatWithoutSpaces(token, formattedQuery);\n      } else if (token.value === \";\") {\n        formattedQuery = this.formatQuerySeparator(token, formattedQuery);\n      } else {\n        formattedQuery = this.formatWithSpaces(token, formattedQuery);\n      }\n    });\n    return formattedQuery;\n  }\n\n  formatLineComment(token, query) {\n    return this.addNewline(query + token.value);\n  }\n\n  formatBlockComment(token, query) {\n    return this.addNewline(\n      this.addNewline(query) + this.indentComment(token.value)\n    );\n  }\n\n  indentComment(comment) {\n    return comment.replace(/\\n/g, \"\\n\" + this.indentation.getIndent());\n  }\n\n  formatToplevelReservedWord(token, query) {\n    this.indentation.decreaseTopLevel();\n\n    query = this.addNewline(query);\n\n    this.indentation.increaseToplevel();\n\n    query += this.equalizeWhitespace(token.value);\n    return this.addNewline(query);\n  }\n\n  formatNewlineReservedWord(token, query) {\n    return this.addNewline(query) + this.equalizeWhitespace(token.value) + \" \";\n  }\n\n  equalizeWhitespace(string) {\n    return string.replace(/\\s+/g, \" \");\n  }\n  formatOpeningParentheses(token, query) {\n    const preserveWhitespaceFor = [\n      tokenTypes.WHITESPACE,\n      tokenTypes.OPEN_PAREN,\n      tokenTypes.LINE_COMMENT,\n    ];\n    if (!includes(preserveWhitespaceFor, this.previousToken().type)) {\n      query = trimEnd(query);\n    }\n    query += token.value;\n\n    this.inlineBlock.beginIfPossible(this.globalTokens, this.index);\n\n    if (!this.inlineBlock.isActive()) {\n      this.indentation.increaseBlockLevel();\n      query = this.addNewline(query);\n    }\n    return query;\n  }\n\n  formatClosingParentheses(token, query) {\n    if (this.inlineBlock.isActive()) {\n      this.inlineBlock.end();\n      return this.formatWithSpaceAfter(token, query);\n    } else {\n      this.indentation.decreaseBlockLevel();\n      return this.formatWithSpaces(token, this.addNewline(query));\n    }\n  }\n\n  formatPlaceholder(token, query) {\n    return query + this.params.get(token) + \" \";\n  }\n\n  formatComma(token, query) {\n    query = this.trimTrailingWhitespace(query) + token.value + \" \";\n\n    if (this.inlineBlock.isActive()) {\n      return query;\n    } else if (/^LIMIT$/i.test(this.previousReservedWord.value)) {\n      return query;\n    } else {\n      return this.addNewline(query);\n    }\n  }\n\n  formatWithSpaceAfter(token, query) {\n    return this.trimTrailingWhitespace(query) + token.value + \" \";\n  }\n\n  formatWithoutSpaces(token, query) {\n    return this.trimTrailingWhitespace(query) + token.value;\n  }\n\n  formatWithSpaces(token, query) {\n    return query + token.value + \" \";\n  }\n\n  formatQuerySeparator(token, query) {\n    return this.trimTrailingWhitespace(query) + token.value + \"\\n\";\n  }\n\n  addNewline(query) {\n    return trimEnd(query) + \"\\n\" + this.indentation.getIndent();\n  }\n\n  trimTrailingWhitespace(query) {\n    if (this.previousNonWhitespaceToken().type === tokenTypes.LINE_COMMENT) {\n      return trimEnd(query) + \"\\n\";\n    } else {\n      return trimEnd(query);\n    }\n  }\n\n  previousNonWhitespaceToken() {\n    let n = 1;\n    while (this.previousToken(n).type === tokenTypes.WHITESPACE) {\n      n++;\n    }\n    return this.previousToken(n);\n  }\n\n  previousToken(offset = 1) {\n    return this.globalTokens[this.index - offset] || {};\n  }\n}\n\nexport default Formatter;\n","import { Component } from \"react\";\n\nclass Validiator extends Component {\n  validiate = (tokens) => {\n    if (this.syntaxIsCorrect) return true;\n    else return false;\n  };\n\n  syntaxIsCorrect = (tokens) => {\n    var error = false;\n\n    tokens.forEach((token) => {\n      const data = token.value;\n    });\n\n    return error;\n  };\n}\n\nexport default Validiator;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Input from \"./components/input\";\nimport Output from \"./components/output\";\nimport Navbar from \"./components/navbar\";\nimport Button from \"./components/button\";\nimport Tokenizer from \"./tokenizer\";\nimport Formatter from \"./formatter\";\nimport Validiator from \"./Validiator\";\n\nclass App extends Component {\n  state = {\n    inpValue: \"\",\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <div className=\"container-fluid\" id=\"container\">\n          <Input onChange={this.handleChange} />\n          <div id=\"btnConatiner\">\n            <Button onClick={this.handleSubmit} value=\"Format!\" />\n            <Button onClick={this.handleSubmitSyntax} value=\"Validiate!\" />\n          </div>\n          <Output />\n        </div>\n      </div>\n    );\n  }\n  handleSubmitSyntax = () => {\n    const reservedWords = [\n      \"ACCESSIBLE\",\n      \"ACTION\",\n      \"AGAINST\",\n      \"AGGREGATE\",\n      \"ALGORITHM\",\n      \"ALL\",\n      \"ALTER\",\n      \"ANALYSE\",\n      \"ANALYZE\",\n      \"AS\",\n      \"ASC\",\n      \"AUTOCOMMIT\",\n      \"AUTO_INCREMENT\",\n      \"BACKUP\",\n      \"BEGIN\",\n      \"BETWEEN\",\n      \"BINLOG\",\n      \"BOTH\",\n      \"CASCADE\",\n      \"CASE\",\n      \"CHANGE\",\n      \"CHANGED\",\n      \"CHARACTER SET\",\n      \"CHARSET\",\n      \"CHECK\",\n      \"CHECKSUM\",\n      \"COLLATE\",\n      \"COLLATION\",\n      \"COLUMN\",\n      \"COLUMNS\",\n      \"COMMENT\",\n      \"COMMIT\",\n      \"COMMITTED\",\n      \"COMPRESSED\",\n      \"CONCURRENT\",\n      \"CONSTRAINT\",\n      \"CONTAINS\",\n      \"CONVERT\",\n      \"CREATE\",\n      \"CROSS\",\n      \"CURRENT_TIMESTAMP\",\n      \"DATABASE\",\n      \"DATABASES\",\n      \"DAY\",\n      \"DAY_HOUR\",\n      \"DAY_MINUTE\",\n      \"DAY_SECOND\",\n      \"DEFAULT\",\n      \"DEFINER\",\n      \"DELAYED\",\n      \"DELETE\",\n      \"DESC\",\n      \"DESCRIBE\",\n      \"DETERMINISTIC\",\n      \"DISTINCT\",\n      \"DISTINCTROW\",\n      \"DIV\",\n      \"DO\",\n      \"DROP\",\n      \"DUMPFILE\",\n      \"DUPLICATE\",\n      \"DYNAMIC\",\n      \"ELSE\",\n      \"ENCLOSED\",\n      \"END\",\n      \"ENGINE\",\n      \"ENGINES\",\n      \"ENGINE_TYPE\",\n      \"ESCAPE\",\n      \"ESCAPED\",\n      \"EVENTS\",\n      \"EXEC\",\n      \"EXECUTE\",\n      \"EXISTS\",\n      \"EXPLAIN\",\n      \"EXTENDED\",\n      \"FAST\",\n      \"FETCH\",\n      \"FIELDS\",\n      \"FILE\",\n      \"FIRST\",\n      \"FIXED\",\n      \"FLUSH\",\n      \"FOR\",\n      \"FORCE\",\n      \"FOREIGN\",\n      \"FULL\",\n      \"FULLTEXT\",\n      \"FUNCTION\",\n      \"GLOBAL\",\n      \"GRANT\",\n      \"GRANTS\",\n      \"GROUP_CONCAT\",\n      \"HEAP\",\n      \"HIGH_PRIORITY\",\n      \"HOSTS\",\n      \"HOUR\",\n      \"HOUR_MINUTE\",\n      \"HOUR_SECOND\",\n      \"IDENTIFIED\",\n      \"IF\",\n      \"IFNULL\",\n      \"IGNORE\",\n      \"IN\",\n      \"INDEX\",\n      \"INDEXES\",\n      \"INFILE\",\n      \"INSERT\",\n      \"INSERT_ID\",\n      \"INSERT_METHOD\",\n      \"INTERVAL\",\n      \"INTO\",\n      \"INVOKER\",\n      \"IS\",\n      \"ISOLATION\",\n      \"KEY\",\n      \"KEYS\",\n      \"KILL\",\n      \"LAST_INSERT_ID\",\n      \"LEADING\",\n      \"LEVEL\",\n      \"LIKE\",\n      \"LINEAR\",\n      \"LINES\",\n      \"LOAD\",\n      \"LOCAL\",\n      \"LOCK\",\n      \"LOCKS\",\n      \"LOGS\",\n      \"LOW_PRIORITY\",\n      \"MARIA\",\n      \"MASTER\",\n      \"MASTER_CONNECT_RETRY\",\n      \"MASTER_HOST\",\n      \"MASTER_LOG_FILE\",\n      \"MATCH\",\n      \"MAX_CONNECTIONS_PER_HOUR\",\n      \"MAX_QUERIES_PER_HOUR\",\n      \"MAX_ROWS\",\n      \"MAX_UPDATES_PER_HOUR\",\n      \"MAX_USER_CONNECTIONS\",\n      \"MEDIUM\",\n      \"MERGE\",\n      \"MINUTE\",\n      \"MINUTE_SECOND\",\n      \"MIN_ROWS\",\n      \"MODE\",\n      \"MODIFY\",\n      \"MONTH\",\n      \"MRG_MYISAM\",\n      \"MYISAM\",\n      \"NAMES\",\n      \"NATURAL\",\n      \"NOT\",\n      \"NOW()\",\n      \"NULL\",\n      \"OFFSET\",\n      \"ON DELETE\",\n      \"ON UPDATE\",\n      \"ON\",\n      \"ONLY\",\n      \"OPEN\",\n      \"OPTIMIZE\",\n      \"OPTION\",\n      \"OPTIONALLY\",\n      \"OUTFILE\",\n      \"PACK_KEYS\",\n      \"PAGE\",\n      \"PARTIAL\",\n      \"PARTITION\",\n      \"PARTITIONS\",\n      \"PASSWORD\",\n      \"PRIMARY\",\n      \"PRIVILEGES\",\n      \"PROCEDURE\",\n      \"PROCESS\",\n      \"PROCESSLIST\",\n      \"PURGE\",\n      \"QUICK\",\n      \"RAID0\",\n      \"RAID_CHUNKS\",\n      \"RAID_CHUNKSIZE\",\n      \"RAID_TYPE\",\n      \"RANGE\",\n      \"READ\",\n      \"READ_ONLY\",\n      \"READ_WRITE\",\n      \"REFERENCES\",\n      \"REGEXP\",\n      \"RELOAD\",\n      \"RENAME\",\n      \"REPAIR\",\n      \"REPEATABLE\",\n      \"REPLACE\",\n      \"REPLICATION\",\n      \"RESET\",\n      \"RESTORE\",\n      \"RESTRICT\",\n      \"RETURN\",\n      \"RETURNS\",\n      \"REVOKE\",\n      \"RLIKE\",\n      \"ROLLBACK\",\n      \"ROW\",\n      \"ROWS\",\n      \"ROW_FORMAT\",\n      \"SECOND\",\n      \"SECURITY\",\n      \"SEPARATOR\",\n      \"SERIALIZABLE\",\n      \"SESSION\",\n      \"SHARE\",\n      \"SHOW\",\n      \"SHUTDOWN\",\n      \"SLAVE\",\n      \"SONAME\",\n      \"SOUNDS\",\n      \"SQL\",\n      \"SQL_AUTO_IS_NULL\",\n      \"SQL_BIG_RESULT\",\n      \"SQL_BIG_SELECTS\",\n      \"SQL_BIG_TABLES\",\n      \"SQL_BUFFER_RESULT\",\n      \"SQL_CACHE\",\n      \"SQL_CALC_FOUND_ROWS\",\n      \"SQL_LOG_BIN\",\n      \"SQL_LOG_OFF\",\n      \"SQL_LOG_UPDATE\",\n      \"SQL_LOW_PRIORITY_UPDATES\",\n      \"SQL_MAX_JOIN_SIZE\",\n      \"SQL_NO_CACHE\",\n      \"SQL_QUOTE_SHOW_CREATE\",\n      \"SQL_SAFE_UPDATES\",\n      \"SQL_SELECT_LIMIT\",\n      \"SQL_SLAVE_SKIP_COUNTER\",\n      \"SQL_SMALL_RESULT\",\n      \"SQL_WARNINGS\",\n      \"START\",\n      \"STARTING\",\n      \"STATUS\",\n      \"STOP\",\n      \"STORAGE\",\n      \"STRAIGHT_JOIN\",\n      \"STRING\",\n      \"STRIPED\",\n      \"SUPER\",\n      \"TABLE\",\n      \"TABLES\",\n      \"TEMPORARY\",\n      \"TERMINATED\",\n      \"THEN\",\n      \"TO\",\n      \"TRAILING\",\n      \"TRANSACTIONAL\",\n      \"TRUE\",\n      \"TRUNCATE\",\n      \"TYPE\",\n      \"TYPES\",\n      \"UNCOMMITTED\",\n      \"UNIQUE\",\n      \"UNLOCK\",\n      \"UNSIGNED\",\n      \"USAGE\",\n      \"USE\",\n      \"USING\",\n      \"VARIABLES\",\n      \"VIEW\",\n      \"WHEN\",\n      \"WITH\",\n      \"WORK\",\n      \"WRITE\",\n      \"YEAR_MONTH\",\n    ];\n\n    const reservedToplevelWords = [\n      \"ADD\",\n      \"AFTER\",\n      \"ALTER COLUMN\",\n      \"ALTER TABLE\",\n      \"DELETE FROM\",\n      \"EXCEPT\",\n      \"FETCH FIRST\",\n      \"FROM\",\n      \"GROUP BY\",\n      \"GO\",\n      \"HAVING\",\n      \"INSERT INTO\",\n      \"INSERT\",\n      \"INTERSECT\",\n      \"LIMIT\",\n      \"MODIFY\",\n      \"ORDER BY\",\n      \"SELECT\",\n      \"SET CURRENT SCHEMA\",\n      \"SET SCHEMA\",\n      \"SET\",\n      \"UNION ALL\",\n      \"UNION\",\n      \"UPDATE\",\n      \"VALUES\",\n      \"WHERE\",\n    ];\n\n    const reservedNewlineWords = [\n      \"AND\",\n      \"CROSS APPLY\",\n      \"CROSS JOIN\",\n      \"ELSE\",\n      \"INNER JOIN\",\n      \"JOIN\",\n      \"LEFT JOIN\",\n      \"LEFT OUTER JOIN\",\n      \"OR\",\n      \"OUTER APPLY\",\n      \"OUTER JOIN\",\n      \"RIGHT JOIN\",\n      \"RIGHT OUTER JOIN\",\n      \"WHEN\",\n      \"XOR\",\n    ];\n\n    let tokenizer = new Tokenizer({\n      reservedWords,\n      reservedToplevelWords,\n      reservedNewlineWords,\n      stringTypes: [`\"\"`, \"N''\", \"''\", \"``\", \"[]\"],\n      openParens: [\"(\", \"CASE\"],\n      closeParens: [\")\", \"END\"],\n      indexedPlaceholderTypes: [\"?\"],\n      namedPlaceholderTypes: [\"@\", \":\"],\n      lineCommentTypes: [\"#\", \"--\"],\n    });\n    let tokens = tokenizer.tokenize(this.state.inpValue);\n\n    console.log(\"validiate\", tokens);\n\n    if (Validiator) alert(\"NO ERROR!\");\n    else alert(\"Error found, please check your SQL Query!\");\n  };\n\n  handleChange = () => {\n    const inp = document.getElementById(\"inputSQL\").value;\n    console.log(inp);\n    this.setState({ inpValue: inp });\n  };\n\n  handleSubmit = () => {\n    const query = this.state.inpValue;\n    console.log(query.length);\n\n    // const formattedText = this.formatText(text);\n    // console.log(formattedText);\n    // document.getElementById(\"outputSQL\").value = formattedText;\n\n    const reservedWords = [\n      \"ACCESSIBLE\",\n      \"ACTION\",\n      \"AGAINST\",\n      \"AGGREGATE\",\n      \"ALGORITHM\",\n      \"ALL\",\n      \"ALTER\",\n      \"ANALYSE\",\n      \"ANALYZE\",\n      \"AS\",\n      \"ASC\",\n      \"AUTOCOMMIT\",\n      \"AUTO_INCREMENT\",\n      \"BACKUP\",\n      \"BEGIN\",\n      \"BETWEEN\",\n      \"BINLOG\",\n      \"BOTH\",\n      \"CASCADE\",\n      \"CASE\",\n      \"CHANGE\",\n      \"CHANGED\",\n      \"CHARACTER SET\",\n      \"CHARSET\",\n      \"CHECK\",\n      \"CHECKSUM\",\n      \"COLLATE\",\n      \"COLLATION\",\n      \"COLUMN\",\n      \"COLUMNS\",\n      \"COMMENT\",\n      \"COMMIT\",\n      \"COMMITTED\",\n      \"COMPRESSED\",\n      \"CONCURRENT\",\n      \"CONSTRAINT\",\n      \"CONTAINS\",\n      \"CONVERT\",\n      \"CREATE\",\n      \"CROSS\",\n      \"CURRENT_TIMESTAMP\",\n      \"DATABASE\",\n      \"DATABASES\",\n      \"DAY\",\n      \"DAY_HOUR\",\n      \"DAY_MINUTE\",\n      \"DAY_SECOND\",\n      \"DEFAULT\",\n      \"DEFINER\",\n      \"DELAYED\",\n      \"DELETE\",\n      \"DESC\",\n      \"DESCRIBE\",\n      \"DETERMINISTIC\",\n      \"DISTINCT\",\n      \"DISTINCTROW\",\n      \"DIV\",\n      \"DO\",\n      \"DROP\",\n      \"DUMPFILE\",\n      \"DUPLICATE\",\n      \"DYNAMIC\",\n      \"ELSE\",\n      \"ENCLOSED\",\n      \"END\",\n      \"ENGINE\",\n      \"ENGINES\",\n      \"ENGINE_TYPE\",\n      \"ESCAPE\",\n      \"ESCAPED\",\n      \"EVENTS\",\n      \"EXEC\",\n      \"EXECUTE\",\n      \"EXISTS\",\n      \"EXPLAIN\",\n      \"EXTENDED\",\n      \"FAST\",\n      \"FETCH\",\n      \"FIELDS\",\n      \"FILE\",\n      \"FIRST\",\n      \"FIXED\",\n      \"FLUSH\",\n      \"FOR\",\n      \"FORCE\",\n      \"FOREIGN\",\n      \"FULL\",\n      \"FULLTEXT\",\n      \"FUNCTION\",\n      \"GLOBAL\",\n      \"GRANT\",\n      \"GRANTS\",\n      \"GROUP_CONCAT\",\n      \"HEAP\",\n      \"HIGH_PRIORITY\",\n      \"HOSTS\",\n      \"HOUR\",\n      \"HOUR_MINUTE\",\n      \"HOUR_SECOND\",\n      \"IDENTIFIED\",\n      \"IF\",\n      \"IFNULL\",\n      \"IGNORE\",\n      \"IN\",\n      \"INDEX\",\n      \"INDEXES\",\n      \"INFILE\",\n      \"INSERT\",\n      \"INSERT_ID\",\n      \"INSERT_METHOD\",\n      \"INTERVAL\",\n      \"INTO\",\n      \"INVOKER\",\n      \"IS\",\n      \"ISOLATION\",\n      \"KEY\",\n      \"KEYS\",\n      \"KILL\",\n      \"LAST_INSERT_ID\",\n      \"LEADING\",\n      \"LEVEL\",\n      \"LIKE\",\n      \"LINEAR\",\n      \"LINES\",\n      \"LOAD\",\n      \"LOCAL\",\n      \"LOCK\",\n      \"LOCKS\",\n      \"LOGS\",\n      \"LOW_PRIORITY\",\n      \"MARIA\",\n      \"MASTER\",\n      \"MASTER_CONNECT_RETRY\",\n      \"MASTER_HOST\",\n      \"MASTER_LOG_FILE\",\n      \"MATCH\",\n      \"MAX_CONNECTIONS_PER_HOUR\",\n      \"MAX_QUERIES_PER_HOUR\",\n      \"MAX_ROWS\",\n      \"MAX_UPDATES_PER_HOUR\",\n      \"MAX_USER_CONNECTIONS\",\n      \"MEDIUM\",\n      \"MERGE\",\n      \"MINUTE\",\n      \"MINUTE_SECOND\",\n      \"MIN_ROWS\",\n      \"MODE\",\n      \"MODIFY\",\n      \"MONTH\",\n      \"MRG_MYISAM\",\n      \"MYISAM\",\n      \"NAMES\",\n      \"NATURAL\",\n      \"NOT\",\n      \"NOW()\",\n      \"NULL\",\n      \"OFFSET\",\n      \"ON DELETE\",\n      \"ON UPDATE\",\n      \"ON\",\n      \"ONLY\",\n      \"OPEN\",\n      \"OPTIMIZE\",\n      \"OPTION\",\n      \"OPTIONALLY\",\n      \"OUTFILE\",\n      \"PACK_KEYS\",\n      \"PAGE\",\n      \"PARTIAL\",\n      \"PARTITION\",\n      \"PARTITIONS\",\n      \"PASSWORD\",\n      \"PRIMARY\",\n      \"PRIVILEGES\",\n      \"PROCEDURE\",\n      \"PROCESS\",\n      \"PROCESSLIST\",\n      \"PURGE\",\n      \"QUICK\",\n      \"RAID0\",\n      \"RAID_CHUNKS\",\n      \"RAID_CHUNKSIZE\",\n      \"RAID_TYPE\",\n      \"RANGE\",\n      \"READ\",\n      \"READ_ONLY\",\n      \"READ_WRITE\",\n      \"REFERENCES\",\n      \"REGEXP\",\n      \"RELOAD\",\n      \"RENAME\",\n      \"REPAIR\",\n      \"REPEATABLE\",\n      \"REPLACE\",\n      \"REPLICATION\",\n      \"RESET\",\n      \"RESTORE\",\n      \"RESTRICT\",\n      \"RETURN\",\n      \"RETURNS\",\n      \"REVOKE\",\n      \"RLIKE\",\n      \"ROLLBACK\",\n      \"ROW\",\n      \"ROWS\",\n      \"ROW_FORMAT\",\n      \"SECOND\",\n      \"SECURITY\",\n      \"SEPARATOR\",\n      \"SERIALIZABLE\",\n      \"SESSION\",\n      \"SHARE\",\n      \"SHOW\",\n      \"SHUTDOWN\",\n      \"SLAVE\",\n      \"SONAME\",\n      \"SOUNDS\",\n      \"SQL\",\n      \"SQL_AUTO_IS_NULL\",\n      \"SQL_BIG_RESULT\",\n      \"SQL_BIG_SELECTS\",\n      \"SQL_BIG_TABLES\",\n      \"SQL_BUFFER_RESULT\",\n      \"SQL_CACHE\",\n      \"SQL_CALC_FOUND_ROWS\",\n      \"SQL_LOG_BIN\",\n      \"SQL_LOG_OFF\",\n      \"SQL_LOG_UPDATE\",\n      \"SQL_LOW_PRIORITY_UPDATES\",\n      \"SQL_MAX_JOIN_SIZE\",\n      \"SQL_NO_CACHE\",\n      \"SQL_QUOTE_SHOW_CREATE\",\n      \"SQL_SAFE_UPDATES\",\n      \"SQL_SELECT_LIMIT\",\n      \"SQL_SLAVE_SKIP_COUNTER\",\n      \"SQL_SMALL_RESULT\",\n      \"SQL_WARNINGS\",\n      \"START\",\n      \"STARTING\",\n      \"STATUS\",\n      \"STOP\",\n      \"STORAGE\",\n      \"STRAIGHT_JOIN\",\n      \"STRING\",\n      \"STRIPED\",\n      \"SUPER\",\n      \"TABLE\",\n      \"TABLES\",\n      \"TEMPORARY\",\n      \"TERMINATED\",\n      \"THEN\",\n      \"TO\",\n      \"TRAILING\",\n      \"TRANSACTIONAL\",\n      \"TRUE\",\n      \"TRUNCATE\",\n      \"TYPE\",\n      \"TYPES\",\n      \"UNCOMMITTED\",\n      \"UNIQUE\",\n      \"UNLOCK\",\n      \"UNSIGNED\",\n      \"USAGE\",\n      \"USE\",\n      \"USING\",\n      \"VARIABLES\",\n      \"VIEW\",\n      \"WHEN\",\n      \"WITH\",\n      \"WORK\",\n      \"WRITE\",\n      \"YEAR_MONTH\",\n    ];\n\n    const reservedToplevelWords = [\n      \"ADD\",\n      \"AFTER\",\n      \"ALTER COLUMN\",\n      \"ALTER TABLE\",\n      \"DELETE FROM\",\n      \"EXCEPT\",\n      \"FETCH FIRST\",\n      \"FROM\",\n      \"GROUP BY\",\n      \"GO\",\n      \"HAVING\",\n      \"INSERT INTO\",\n      \"INSERT\",\n      \"INTERSECT\",\n      \"LIMIT\",\n      \"MODIFY\",\n      \"ORDER BY\",\n      \"SELECT\",\n      \"SET CURRENT SCHEMA\",\n      \"SET SCHEMA\",\n      \"SET\",\n      \"UNION ALL\",\n      \"UNION\",\n      \"UPDATE\",\n      \"VALUES\",\n      \"WHERE\",\n    ];\n\n    const reservedNewlineWords = [\n      \"AND\",\n      \"CROSS APPLY\",\n      \"CROSS JOIN\",\n      \"ELSE\",\n      \"INNER JOIN\",\n      \"JOIN\",\n      \"LEFT JOIN\",\n      \"LEFT OUTER JOIN\",\n      \"OR\",\n      \"OUTER APPLY\",\n      \"OUTER JOIN\",\n      \"RIGHT JOIN\",\n      \"RIGHT OUTER JOIN\",\n      \"WHEN\",\n      \"XOR\",\n    ];\n\n    let tokenizer = new Tokenizer({\n      reservedWords,\n      reservedToplevelWords,\n      reservedNewlineWords,\n      stringTypes: [`\"\"`, \"N''\", \"''\", \"``\", \"[]\"],\n      openParens: [\"(\", \"CASE\"],\n      closeParens: [\")\", \"END\"],\n      indexedPlaceholderTypes: [\"?\"],\n      namedPlaceholderTypes: [\"@\", \":\"],\n      lineCommentTypes: [\"#\", \"--\"],\n    });\n\n    const tokens = tokenizer.tokenize(query);\n    this.globalTokens = tokens;\n    let f = new Formatter();\n    const finalSQL = f.format(tokens);\n    console.log(tokens);\n    document.getElementById(\"outputSQL\").value = finalSQL;\n  };\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}